#include "stdafx.h"

Core::Core() :
	db(),
	teaminfo_(),
	skaterinfo_(),
	goalieinfo_(),
	teams_(),
	skaters_(),
	goalies_(),
	rnd()
{
	CORE.InitDatabase();
	CORE.CreateTeams();
	CORE.CreatePlayers();
	CORE.StartSeason();
}


Core::~Core()
{
	for (std::vector<Team*>::iterator it = teams_.begin(); it != teams_.end(); it++)
	{
		delete (*it);
	}
	for (std::vector<Skater*>::iterator it = skaters_.begin(); it != skaters_.end(); it++)
	{
		delete (*it);
	}
	for (std::vector<Goalie*>::iterator it = goalies_.begin(); it != goalies_.end(); it++)
	{
		delete (*it);
	}
}

// Initialize the database.
void Core::InitDatabase()
{
	db.LoadDatabase();
	db.FetchDatabase();
}

void Core::CreateTeams()
{
	// Teams
	for (std::vector<TeamInfo*>::iterator it = teaminfo_.begin(); it != teaminfo_.end(); it++)
	{
		Team* pTeam = new Team(*it);
		teams_.push_back(pTeam);
	}
}

// Create player objects from the information generated by the database
void Core::CreatePlayers()
{
	// Skaters
	for (std::vector<SkaterInfo*>::iterator it = skaterinfo_.begin(); it != skaterinfo_.end(); it++)
	{
		Skater* pSkater = new Skater(*it);
		skaters_.push_back(pSkater);

		TeamType eTeam = pSkater->GetInfo()->GetTeam();
		if (eTeam != NO_TEAM)
			teams_[eTeam]->GetRoster()->AddPlayer(pSkater);
	}

	// Goalies
	for (std::vector<GoalieInfo*>::iterator it = goalieinfo_.begin(); it != goalieinfo_.end(); it++)
	{
		Goalie* pGoalie = new Goalie(*it);
		goalies_.push_back(pGoalie);

		TeamType eTeam = pGoalie->GetInfo()->GetTeam();
		if (eTeam != NO_TEAM)
			teams_[eTeam]->GetRoster()->AddPlayer(pGoalie);
	}

	teams_[19]->GetRoster()->BestLines();
	teams_[22]->GetRoster()->BestLines();
}

// Simulate a season.
void Core::StartSeason()
{
	int iGamesPlayed = 41;

	log.SetCurrentFile("GameLog.csv");
	log.WriteLogToFile("GameID,Home,Away,HomeScore,AwayScore,HomeSOG,AwaySOG,HomeCorsi,AwayCorsi,HomePIM,AwayPIM,HomeTOA,AwayTOA");

	for (int i = 0; i < iGamesPlayed; i++)
	{
		Team* pHomeTeam = (i % 2 == 0) ? teams_[19] : teams_[22];
		Team* pAwayTeam = (i % 2 == 1) ? teams_[19] : teams_[22];
		Game test(pHomeTeam, pAwayTeam, Game::GAME_TYPE_REGULAR_SEASON, Game::OVERTIME_FIVE_OT_SHOOTOUT);
		
		auto StartTime = std::chrono::high_resolution_clock::now();

		test.Simulate();

		auto FinishTime = std::chrono::high_resolution_clock::now();
		auto Duration = std::chrono::duration_cast<std::chrono::milliseconds>(FinishTime - StartTime).count();

		std::cout << test.GetID() << " Simmed game. (Took " << Duration  << "ms)" << std::endl;

		pHomeTeam->GetSeasonStats() += test.GetHomeStats();
		pAwayTeam->GetSeasonStats() += test.GetAwayStats();

		// Log function?
		log.SetCurrentFile("GameLog.csv");
		
		std::string logStr;
		logStr += std::to_string(test.GetID()) + ",";
		logStr += test.GetHomeTeam()->GetInfo()->GetAbbreviation() + ",";
		logStr += test.GetAwayTeam()->GetInfo()->GetAbbreviation() + ",";
		logStr += std::to_string(test.GetHomeStats().iGoals) + ",";
		logStr += std::to_string(test.GetAwayStats().iGoals) + ",";
		logStr += std::to_string(test.GetHomeStats().iShots) + ",";
		logStr += std::to_string(test.GetAwayStats().iShots) + ",";
		logStr += std::to_string(test.GetHomeStats().iShotAttempts) + ",";
		logStr += std::to_string(test.GetAwayStats().iShotAttempts) + ",";
		logStr += std::to_string(test.GetHomeStats().iPIM) + ",";
		logStr += std::to_string(test.GetAwayStats().iPIM) + ",";
		logStr += GetTimeString(test.GetHomeStats().iTimeOnAttack) + ",";
		logStr += GetTimeString(test.GetAwayStats().iTimeOnAttack);
		
		log.WriteLogToFile(logStr);
	}

	log.SetCurrentFile("GameLog.csv");
	log.WriteLogToFile("\nTeam,W,L,OTL,ROW,Goals,Shots,SA,PIM,TOA,FO Win");

	// Log function?
	log.SetCurrentFile("GameLog.csv");
	for (int i = 0; i < teams_.size(); i++)
	{
		Team* pLoopTeam = teams_[i];

		std::string logStr;
		logStr += pLoopTeam->GetInfo()->GetAbbreviation() + ",";
		logStr += std::to_string(pLoopTeam->GetRegularSeasonRecord().GetWins()) + ",";
		logStr += std::to_string(pLoopTeam->GetRegularSeasonRecord().GetLosses()) + ",";
		logStr += std::to_string(pLoopTeam->GetRegularSeasonRecord().GetOvertimeLosses()) + ",";
		logStr += std::to_string(pLoopTeam->GetRegularSeasonRecord().GetROW()) + ",";
		logStr += std::to_string(pLoopTeam->GetSeasonStats().iGoals) + ",";
		logStr += std::to_string(pLoopTeam->GetSeasonStats().iShots) + ",";
		logStr += std::to_string(pLoopTeam->GetSeasonStats().iShotAttempts) + ",";
		logStr += std::to_string(pLoopTeam->GetSeasonStats().iPIM) + ",";
		logStr += GetTimeString(pLoopTeam->GetSeasonStats().iTimeOnAttack) + ",";
		logStr += std::to_string(pLoopTeam->GetSeasonStats().iFaceoffs) + ",";

		log.WriteLogToFile(logStr);
	}

	// Log function?
	log.SetCurrentFile("PlayerStats.csv");
	log.WriteLogToFile("Last,First,Goals,Assists,Points,Shots,Corsi,TOI, +/-");
	
	// Skaters
	for (std::vector<Skater*>::iterator it = skaters_.begin(); it != skaters_.end(); it++)
	{
		std::string logStr;
		logStr += (*it)->GetInfo()->GetLastName() + ", " + (*it)->GetInfo()->GetFirstName() + ", ";
		logStr += std::to_string((*it)->GetSeasonStats().iGoals) + ", " + std::to_string((*it)->GetSeasonStats().iAssists) + ", " + std::to_string((*it)->GetSeasonStats().iGoals + (*it)->GetSeasonStats().iAssists) + ", ";
		logStr += std::to_string((*it)->GetSeasonStats().iShots) + ", " + std::to_string((*it)->GetSeasonStats().iShotAttempts) + ", ";
		logStr += GetTimeString((*it)->GetSeasonStats().iTOI) + ", " + std::to_string((*it)->GetSeasonStats().iPlusMinus);
		log.WriteLogToFile(logStr);
	}
}

std::vector<Team*>& Core::GetTeams()
{
	return teams_;
}
Team* Core::GetTeam(int id) const
{
	if (id < 0 || id >= teams_.size())
	{
		std::cout << "Error! Invalid ID" << std::endl;
	}

	return teams_[id];
}

std::vector<Skater*>& Core::GetSkaters()
{
	return skaters_;
}
Skater* Core::GetSkater(int id) const
{
	if (id < 0 || id >= skaters_.size())
	{
		std::cout << "Error! Invalid ID" << std::endl;
	}

	return skaters_[id];
}

std::vector<Goalie*>& Core::GetGoalies()
{
	return goalies_;
}

Goalie* Core::GetGoalie(int id) const
{
	if (id < 0 || id >= goalies_.size())
	{
		std::cout << "Error! Invalid ID" << std::endl;
	}

	return goalies_[id];
}

std::vector<TeamInfo*>& Core::GetTeamInfo()
{
	return teaminfo_;
}

std::vector<SkaterInfo*>& Core::GetSkaterInfo()
{
	return skaterinfo_;
}

std::vector<GoalieInfo*>& Core::GetGoalieInfo()
{
	return goalieinfo_;
}

Database::DatabaseUtility Core::GetDatabase() const
{
	return db;
}

Randomizer& Core::GetRandom()
{
	return rnd;
}

Logger& Core::GetLogger()
{
	return log;
}

// Accepts a time in seconds and returns a string in MM:SS format
std::string Core::GetTimeString(int seconds)
{
	std::string szMinutes = std::to_string(seconds / 60);
	std::string szSeconds = std::to_string(seconds % 60);

	if (szSeconds.length() == 1)
		szSeconds.insert(0, "0");

	return szMinutes + ":" + szSeconds;
}